library("forcats")
library("ggplot2")
library("tidyverse")
library(dplyr)
library(DT)
#For the maps
library(leaflet)
library(rgdal)
library(broom)
library(tidyverse)
library(RColorBrewer)
library(raster)
library(sf)
#This command clears the environment
rm(list = ls())
# Create a path to DB folder
if (Sys.info()["sysname"] == "Windows"){
git_path <- paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/r-shiny-sample/code")
} else {
git_path <- paste0("/Users/", Sys.info()[7], "/Documents/GitHub/r-shiny-sample/code")
}
print(git_path)
setwd(git_path)
###############################
# 1. Read in data  ############
###############################
# Data to graph as bar chart
data_to_graph <- read.csv("data/stacked_bar_fakedata.csv")
# Data to graph as map
data_to_map <- read.csv("data/standard_bar_fakedata.csv")
# India geographical info for GGPLOT2
states <- readOGR("data/IndiaShapeFiles")
states <- ms_simplify(states, keep = 0.01, keep_shapes = T)
states <- tidy(states, region = "NAME")
# India shapefile for State labels
shp <- read_sf("data/IndiaShapeFiles/STATE_11.shp")
# Create dataset with X and Y coordinates for each State to add as labels on GGPLOT2 map
coords <- shp %>%
st_centroid() %>%
st_coordinates() %>%
cbind(shp) %>%
rename(lon = X, lat = Y) %>%
st_as_sf()
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana")
#Merge the shapefile with the data to map
states_data <- left_join(states, data_to_map, by = c("id" = "State")) %>%
filter(!is.na(Estimate)) %>%
filter(id != "Telangana")
ggplot(data = states_data, mapping = aes(x = long, y = lat, group = group))+
geom_polygon(color = "darkslategray", aes(fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 3) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat, group = group))+
geom_polygon(color = "darkslategray", aes(fill = Estimate, linetype = program_status)) +
#geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 3) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana") %>%
st_drop_geometry()
View(data_map_unique)
coords <- shp %>%
st_centroid() %>%
st_coordinates() %>%
cbind(shp) %>%
rename(lon = X, lat = Y)
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana")
ggplot(data = states_data, mapping = aes(x = long, y = lat, group = group))+
geom_polygon(color = "darkslategray", aes(fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 3) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat))+
geom_polygon(aes(group = group), color = "darkslategray", aes(fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 3) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat))+
geom_polygon(color = "darkslategray", aes(group = group, fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 3) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat))+
geom_polygon(color = "darkslategray", aes(group = group, fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 2) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat))+
geom_polygon(color = "darkslategray", aes(group = group, fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 1) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
ggplot(data = states_data, mapping = aes(x = long, y = lat))+
geom_polygon(color = "darkslategray", aes(group = group, fill = Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 1.5) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
#This would be ideal but cannot get it to work- manually set line types
#scale_linetype_manual(values=linetype) +
#scale_linetype_manual(name="TA status", values = c("" , ""),
# breaks=c("TA", "No TA"), labels = c("TA", "No TA")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.7,.1))
shiny::runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_to_graph <- read.csv("data/stacked_bar_fakedata.csv")
View(data_to_graph)
runApp()
duplicated(IndicatorName)
duplicated(data_to_graph$IndicatorName)
runApp()
runApp()
library(rsconnect)
setAccountInfo(name='hassan-saad',
token='0A4793AC13DB005AF6CD9090B5BD27FC',
secret='PJECvaJHfGdZfCNTw6urHbOTsxQ1pSHo/UvMiSEo')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
library(rsconnect)
setAccountInfo(name='hassan-saad',
token='0A4793AC13DB005AF6CD9090B5BD27FC',
secret='PJECvaJHfGdZfCNTw6urHbOTsxQ1pSHo/UvMiSEo')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
runApp()
rm(list = ls())
runApp()
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
# Sample Shiny Dashboard
###############################
# 0. Set up Environment #######
###############################
#This command clears the environment
rm(list = ls())
# Load in needed packages
# For shiny
library(shinydashboard)
#For the bar charts
library(forcats)
library(ggplot2)
library(tidyverse)
library(DT)
#For the maps
library(rmapshaper)
library(rgdal)
library(broom)
library(tidyverse)
library(RColorBrewer)
library(raster)
library(sf)
# Create a path to git folder
if (Sys.info()["sysname"] == "Windows"){
git_path <- paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/r-shiny-sample/code")
} else {
git_path <- paste0("/Users/", Sys.info()[7], "/Documents/GitHub/r-shiny-sample/code")
}
print(git_path)
setwd(git_path)
# Data to graph as bar chart
data_to_graph <- read.csv("data/stacked_bar_fakedata.csv")
# Data to graph as map
data_to_map <- read.csv("data/standard_bar_fakedata.csv")
# India shapefile for State labels
shp <- read_sf("data/IndiaShapeFiles/STATE_11.shp")
data_map <- left_join(data_to_map, dplyr::select(shp, NAME, geometry), by = c("State" = "NAME")) %>%
filter(State != "Telangana")
View(data_map)
data_map <- left_join(data_to_map, dplyr::select(shp, NAME, geometry), by = c("State" = "NAME")) %>%
filter(State != "Telangana") %>%
st_as_sf()
ggplot()+
geom_sf(data = data_map, aes(fill=Estimate))
map <- ggplot()+
geom_sf(data = data_map, aes(fill=Estimate))
map <- ggplot() +
geom_sf(data = data_map, aes(fill=Estimate, linetype = program_status)) +
geom_text(data = data_map_labels, aes(lon, lat, label = State), size = 2) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
# Create dataset with X and Y coordinates for each State to add as labels on GGPLOT2 map
coords <- shp %>%
st_centroid() %>%
st_coordinates() %>%
cbind(shp) %>%
rename(lon = X, lat = Y)
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana")
View(data_map_unique)
map <- ggplot() +
geom_sf(data = data_map, aes(fill=Estimate, linetype = program_status)) +
geom_text(data = data_map_unique, aes(lon, lat, label = State), size = 2) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
map
map <- ggplot() +
geom_sf(data = data_map, aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon, lat, label = State), size = 2) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
map
map <- ggplot() +
geom_sf(data = data_map, aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon, lat, label = State), size = 2)
map
map <- ggplot() +
geom_sf(data = data_map, aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(stat = "sf_coordinates", data = data_map_unique, aes(lon, lat, label = State), size = 2)
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status))
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_label(data = data_map_unique, aes(lon,lat, label = State))
map
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana") %>%
st_as_sf
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_label(data = data_map_unique, aes(lon,lat, label = State))
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon,lat, label = State))
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon,lat, label = State)) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_fixed() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon,lat, label = State)) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program"))
map
map <- ggplot(data = data_map) +
geom_sf(aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon,lat, label = State)) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_sf() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
map
map <- ggplot() +
geom_sf(data = data_map,aes(fill=Estimate, linetype = program_status)) +
geom_sf_text(data = data_map_unique, aes(lon,lat, label = State)) +
#
#scale_fill_gradient("Blues") +
scale_fill_gradient(low = "cadetblue1", high = "deepskyblue4", na.value = "grey85") +
#Make different line types for TA vs non-TA
scale_linetype_discrete(name="Program status",
breaks=c("Program", "No Program"),
#values=c('solid', 'blank'),
labels = c("Program", "No Program")) +
coord_sf() +
theme_void() +
#Remove the legend showing which linetype signifies program vs non program states
guides(linetype = FALSE) +
theme(legend.justification=c(0,0), legend.position=c(.9,.8)) +
ggtitle("Proportion of children by state")
map
rm(list=ls())
runApp()
runApp()
# Data to graph as bar chart
data_to_graph <- read.csv("data/stacked_bar_fakedata.csv")
# Data to graph as map
data_to_map <- read.csv("data/standard_bar_fakedata.csv")
# India shapefile for State labels
shp <- read_sf("data/IndiaShapeFiles/STATE_11.shp")
# Create dataset with X and Y coordinates for each State to add as labels on GGPLOT2 map
coords <- shp %>%
st_centroid() %>%
st_coordinates() %>%
cbind(shp) %>%
rename(lon = X, lat = Y)
data_map_unique <- left_join(data_to_map, dplyr::select(coords, NAME, lon, lat), by = c("State" = "NAME")) %>%
filter(State != "Telangana") %>%
st_as_sf()
data_map <- left_join(data_to_map, dplyr::select(shp, NAME, geometry), by = c("State" = "NAME")) %>%
filter(State != "Telangana") %>%
st_as_sf()
runApp()
Q
class(data_map_unique)
class(data_map)
class(data_to_map)
View(data_map_unique)
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/code")
library(rsconnect)
setAccountInfo(name='hassan-saad',
token='0A4793AC13DB005AF6CD9090B5BD27FC',
secret='PJECvaJHfGdZfCNTw6urHbOTsxQ1pSHo/UvMiSEo')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
library(rsconnect)
rsconnect::setAccountInfo(name='hassan-saad',
token='420818300D17043CA2EF8130DCEEA78E',
secret='8gEJirLrixAL2BD6CoHuUskoedAH5L0Id6+em+jS')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
library(rsconnect)
rsconnect::setAccountInfo(name='hassan-saad',
token='420818300D17043CA2EF8130DCEEA78E',
secret='8gEJirLrixAL2BD6CoHuUskoedAH5L0Id6+em+jS')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/app")
library(rsconnect)
rsconnect::setAccountInfo(name='hassan-saad',
token='420818300D17043CA2EF8130DCEEA78E',
secret='8gEJirLrixAL2BD6CoHuUskoedAH5L0Id6+em+jS')
deployApp("/Users/hassansaad/Documents/GitHub/r-shiny-sample/sample_app")
